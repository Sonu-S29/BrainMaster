Absolutely! Here's your **updated, complete development prompt** for building the **Math Workout ReactJS PWA**, now including **AdMob integration** and **PWA setup instructions**.

---

## 📱 ReactJS PWA Prompt: **Math Workout Educational App**

### 🔧 Overview:

Build a **ReactJS Progressive Web App (PWA)** for arithmetic training, called **Math Workout**, with local data storage, language support, and monetization via AdMob or similar ad networks.

---

### 📚 Functional Modules:

#### 🧠 Math Practice Modules

1. Addition
2. Subtraction
3. Multiplication
4. Division
5. Multiplication Tables (Learn & Practice)
6. Square Roots (Learn & Practice)
7. Exponents (Learn & Practice)
8. Arithmetic Memory Training
9. Mixed Operations Practice

---

### ⚙️ Features & Customization

* Difficulty selection: Easy / Medium / Hard / Expert
* Number of questions: 10 / 20 / 40
* Keypad type: Phone-style or Calculator-style
* Toggle sound: On/Off
* Language support using `react-i18next`: English, Spanish, French, German, Russian, Chinese, Hindi, Armenian

---

### 💾 Local Storage

Use **localStorage**, **sessionStorage**, or **IndexedDB** to persist:

* High scores per module
* User settings/preferences
* Progress (accuracy, time, history)

> Recommended library for IndexedDB: [`idb`](https://www.npmjs.com/package/idb) or [`Dexie.js`](https://dexie.org/)

---

### 📊 Progress Tracking

* Display session summary (correct, incorrect, time, accuracy %)
* High scores table
* Progress charts (using `Chart.js` or `Recharts`)

---

### 💸 Ads Integration

**Ad Monetization:**
Integrate **AdMob or a similar web-compatible ad network** (e.g., Google AdSense for PWAs or in-app browser via Cordova/Capacitor wrapper).

> *Note: AdMob works natively (Android/iOS) — use Cordova/Capacitor if wrapping as mobile app.*

---

### 🧩 PWA Support Setup

#### A. **Register the Service Worker**

Open `src/index.js` and add:

```js
import * as serviceWorker from './serviceWorker';
serviceWorker.register();
```

> If `serviceWorker.js` is missing, I can generate it for you.

---

#### B. **Update `manifest.json`**

Create or edit `public/manifest.json`:

```json
{
  "short_name": "MathWorkout",
  "name": "Math Workout - Brain Training",
  "icons": [
    {
      "src": "logo192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "logo512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
```

---

#### C. **Link the Manifest in HTML**

In `public/index.html`, inside `<head>`:

```html
<link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
<meta name="theme-color" content="#000000" />
```

---

### 🧱 Tech Stack Summary

* **Framework:** ReactJS
* **PWA:** Create React App or Vite with PWA plugin
* **Storage:** localStorage / sessionStorage / IndexedDB
* **Charts:** Chart.js / Recharts
* **Localization:** react-i18next
* **Ads:** AdMob, AdSense, or alternative
* **Deployment:** Host on Firebase, Vercel, Netlify, or GitHub Pages

---

Would you like me to:

* Generate the `serviceWorker.js` file?
* Provide a folder structure or starter template?
* Include AdMob integration code (for web or mobile wrapper)?
